# We need superuser privileges
sudo: required
# We inform Travis what we need
services:
    - docker

# A series of commands that we be executed before our tests are run or deploy our app to create our initial image.
before_install:
    # tag: gkaframanis/docker-react
    - docker build -t gkaframanis/docker-react -f Dockerfile.dev . 

# How to run our test suite
script:
    # The default behavior is npm run test is not to exit, but to show 
    # the menu of tests and wait an input so we add -e CI=true.
    # Now it automatically exits, what the travis expects.
    - docker run -e CI=true gkaframanis/docker-react npm run test

deploy:
    provider: elasticbeanstalk
    # API keys. Services --> type iam --> users --> add user --> docker-react-travis-ci (access type: programmatic access) --> Next permission --> Attach existing policies directly (search beanstalk, select AWSElasticBeanstalkFullAccess)
    
    # Local environmental variables to travis-ci.org for this project.
    access_key_id: 
        secure: "$AWS_ACCESS_KEY"
    secret_access_key:
        secure: "$AWS_SECRET_KEY"
    # Depends on where you originally created your elastic beanstalk instance. (check the url that AWS gives you before the elasticbeanstalk.com)
    region: us-east-2
    app: "docker-react"
    env: "DockerReact-environment"
    # When Travis decides to deploy your codebase is gonna take all the files inside of the github repository, is gonna zip them all up in one single file and it's gonna copy all them over to an S3 bucket, which is essentially a hard drive running on AWS.

    # Services --> type S3
    bucket_name: "elasticbeanstalk-us-east-2-651673642226"
    # We don't want to deploy our app of we push code to a feature branch on github which is for active development. Only when we push code on master branch.
    on:
        branch: master